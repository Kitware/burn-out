/*ckwg +5
 * Copyright 2010-2015 by Kitware, Inc. All Rights Reserved. Please refer to
 * KITWARE_LICENSE.TXT for licensing information, or contact General Counsel,
 * Kitware, Inc., 28 Corporate Drive, Clifton Park, NY 12065.
 */


#include <tracking_data/io/track_reader.h>
#include <tracking_data/tracking_keys.h>
#include <testlib/testlib_test.h>

using namespace vidtk;

namespace {  // anon

// ----------------------------------------------------------------
// Test reading missing file
void test_1( char* path )
{
  std::string xmlPath( path );
  xmlPath += "/missing-file.vsl"; // correct extension
  vidtk::track_reader reader( xmlPath );

  std::ostringstream oss;
  oss << "Failed to open missing vsl file '" << xmlPath << "'";
  TEST( oss.str().c_str(), reader.open(), false );
}


} // end namespace


// ================================================================
int test_vsl_reader( int argc, char *argv[] )
{
  testlib_test_start( "test vsl reader" );
  if( argc < 2)
  {
    TEST( "DATA directory not specified", false, true);
    return EXIT_FAILURE;
  }

  test_1( argv[1] );


  {
    std::string vslPath(argv[1]);
    vslPath += "/tracks_filtered.vsl";
    vidtk::track::vector_t tracks;
    vidtk::track::vector_t tracks_all;
    vidtk::track_reader *reader = new vidtk::track_reader(vslPath);
    if ( ! reader->open() )
    {
      std::ostringstream oss;
      oss << "Failed to open '" << vslPath << "'";
      TEST(oss.str().c_str(), false, true);
      return 1;
    }

    unsigned int i = 0;
    unsigned frame;
    for(; reader->read_next_terminated( tracks, frame ); ++i )
    {
      tracks_all.insert(tracks_all.end(), tracks.begin(), tracks.end());
    }

    unsigned int gt[] = {38,42,37,11,20,33,68,75,76,69,64,70,74,78,101,88,96,60,82,53,136,95,116,85,91,97,126,133,106,151,156,141,181,177,188,217,211,218,212,247,202,236,208,252,235,200,216,222,240,221,232,281,276,283,308,259,265,311,273,277,309,318,243,323,258,307,331,335,338,340,358,362,345,347,357,336,365,346,377,388,359,372,376,373,355,381,415,339,344,410,351,370,387,390,406,363,379,403,418,426,394,435,396,451,452,450,471,458,486,446,494,492,477,531,455,500,493,378,479,453,570,568,576,580,582,584,498,573,577,600,583,544,620,592,627,575,593,601,626,663,611,670,558,586,613,634,695,633,655,661,672,706,699,674,716,644,656,703,685,707,697,749,704,723,724,741,731,757,766,758,730,779,784,793,743,767,800,722,769,796,745,815,798,735,744,727,812,810,817,825,818,738,827,853,839,862,867,834,856,871,830,858,860,872,859,892,893,833,838,855,887,900,907,874,878,882,891,894,911,828,873,844,881,895,910,920,919,899,941,928,885,936,926,929,937,932,944,904,957,935,923,947,960,946,943,977,968,972,982,1008,1001,1029,1033,1032,1063,1024,1089,1030,1037,1061,1014,1085,1005,1047,1078,1093,1148,1183,1055,1100,1128,1173,1077,1086,1166,1155,1156,1105,1135,1154,1127,1146,1164,1131,1195,1182,1137,1145,1067,1176,1177,1198,1169,1189,1200,1210,1136,1211,1212,1209,1203,1220,1180,1205,1230,1074,1204,1207,1219,1229,1234,1246,1199,1243,1269,1216,1215,1235,1242,1250,1257,1262,1283,1185,1249,1241,1265,1237,1218,1236,1288,1291,1240,1301,1294,1307,1224,1292,1310,1238,1300,1297,1317,1321,1319,1325,1299,1289,1318,1293,1308,1302,1296,1324,1332,1323,1344,1349,1328,1355,1298,1326,1341,1305,1329,1334,1337,1346,1354,1306,1343,1340,1356,1357,1368,1330,1335,1379,1414,1322,1370,1408,1421,1431,1366,1382,1415,1396,1423,1391,1418,1455,1458,1424,1425,1422,1443,1438,1439,1446,1463,1466,1469,1484,1485,1433,1452,1497,1378,1482,1451,1474,1434,1447,1472,1487,1505,1445,1473,1483,1509,1496,1394,1470,1486,1502,1512,1521,1489,1491,1519,1432,1517,1479,1516,1528,1548,1462,1504,1533,1508,1518,1552,1481,1440,1532,1551,1557,1529,1406,1542,1420,1567,1574,1600,1585,1609,1565,1605,1515,1586,1604,1492,1573,1578,1606,1597,1607,1614,1390,1610,1640,1636,1642,1643,1649,1666,1644,1664,1667,1650,1657,1671,1678,1683,1686,1693,1697,1701,1699,1687,1703,1698,1704,1712,1719,1708,1728,1737,1720,1723,1738,1727,1735,1736,1752,1766,1710,1744,1774,1771,1757,1777,1754,1713,1764,1772,1821,1718,1767,1769,1845,1765,1756,1760,1852,1853,1770,1822,1768,1797,1865,1875,1831,1873,1877,1897,1879,1907,1924,1936,1809,1895,1899,1933,1888,1866,1874,1917,1948,1896,1883,1911,1913,1937,1954,1970,1961,1959,1889,1810,1930,1965,1966,2001,2006,1953,1971,2004,1993,1884,2019,2047,2014,2024,2041,2068,2025,2031,2042,2043,2063,2072,2086,2037,2045,2034,1989,2107,2061,2062,2094,2100,2049,2067,2083,2087,2130,2118,2017,2112,2141,2135,2161,2109,2071,2097,2134,2146,2092,2172,2178,2140,2171};

    for( unsigned int j = 0; j < tracks_all.size(); ++j )
    {
      TEST("Track has correct id", tracks_all[j]->id(), gt[j]);
    }

    unsigned int hs[] = {6,7,8,14,14,10,8,7,8,9,13,12,14,13,9,16,14,23,19,25,6,14,13,18,19,19,11,17,18,13,18,23,7,12,10,9,11,9,12,6,15,14,13,8,13,20,21,17,15,21,17,6,12,11,6,25,16,7,20,19,10,8,34,9,35,15,9,11,7,8,7,6,9,10,9,19,8,11,7,9,13,11,11,11,15,10,9,24,17,11,19,21,20,20,18,21,19,18,15,13,26,8,26,12,10,15,10,13,9,23,8,7,12,6,16,11,13,46,18,23,6,9,7,7,10,10,23,14,15,10,15,25,6,19,6,25,24,23,7,6,12,6,33,26,13,12,6,12,12,10,9,6,10,14,11,21,20,17,13,17,19,7,16,15,16,13,13,11,9,12,21,8,9,10,21,15,7,27,21,16,29,8,20,36,30,38,14,17,8,7,13,32,16,8,15,7,6,19,14,8,19,13,13,10,12,7,7,22,20,19,8,7,6,13,12,8,9,9,6,26,16,24,18,16,12,9,13,18,6,14,20,10,13,19,13,17,14,23,6,20,23,16,7,26,23,9,12,10,9,15,17,12,10,10,6,17,6,14,16,13,22,13,28,18,16,20,9,7,25,20,15,8,20,23,12,12,15,22,15,16,18,15,17,20,7,13,23,19,32,17,23,10,22,24,11,10,23,11,8,14,15,9,29,16,8,38,22,19,15,12,8,7,24,7,6,18,23,11,11,13,16,16,13,37,20,19,21,22,36,33,17,14,35,12,17,11,50,17,13,44,18,18,11,6,13,7,25,33,17,24,24,30,29,14,6,15,9,9,10,8,35,13,12,34,13,18,16,16,14,34,15,20,16,17,10,25,30,14,6,41,19,8,7,6,20,17,7,12,9,15,13,7,6,11,14,15,12,13,14,15,8,11,11,8,6,18,9,6,26,9,18,12,20,20,16,11,7,22,17,11,6,9,30,17,16,15,14,7,20,20,10,30,14,22,15,12,6,28,18,10,22,18,8,24,33,18,13,12,19,44,16,41,11,9,7,13,9,15,8,32,15,12,36,16,17,12,15,12,12,52,10,8,8,13,14,18,7,21,11,11,21,20,16,11,11,14,13,13,10,15,15,11,17,15,13,14,18,12,12,15,16,14,22,16,17,14,6,29,17,9,11,16,12,18,28,17,17,11,36,17,18,7,18,25,23,10,11,22,18,15,21,14,10,23,17,16,9,15,7,6,6,31,13,12,7,12,25,23,13,6,16,16,16,15,12,9,6,9,10,27,48,21,16,15,6,6,15,16,13,21,44,12,9,13,13,9,6,15,12,11,14,12,10,8,14,12,19,38,6,16,17,10,8,16,17,11,11,7,9,27,12,7,8,6,15,24,17,12,9,21,7,7,11,7};
    for( unsigned int j = 0; j < tracks_all.size(); ++j )
    {
      TEST("Correct number track states", tracks_all[j]->history().size(), hs[j]);
    }
    TEST("There are 721 steps", i, 721);
    TEST("There are 614 Tracks", tracks_all.size(), 614);
    delete reader;
  }
  //test image object version 4
  {
    std::string vslPath(argv[1]);
    vslPath += "/test_tracks_vsl_v4.vsl";

    vidtk::track::vector_t tracks_all;

    vidtk::track_reader *reader = new vidtk::track_reader(vslPath);
    if ( ! reader->open() )
    {
      std::ostringstream oss;
      oss << "Failed to open '" << vslPath << "'";
      TEST(oss.str().c_str(), false, true);
      return 1;
    }

    reader->read_all( tracks_all);

    TEST("There are 46 tracks", tracks_all.size(), 46);
    unsigned int gt[] = {8,5,10,4,9,16,12,14,2,7,21,25,18,17,6,27,11,1,13,35,23,39,3,15,19,20,22,24,26,28,29,30,31,32,33,34,37,36,38,41,40,42,43,44,46,45};
    for(unsigned int t = 0; t < tracks_all.size(); ++t)
    {
      TEST("Track has correct id", tracks_all[t]->id(), gt[t]);
    }
    unsigned int hs[] = {7,8,11,6,11,9,14,10,18,20,15,6,17,23,27,10,16,35,24,4,32,4,37,38,39,44,44,35,30,23,26,23,25,27,27,22,15,20,16,12,16,17,10,13,5,15};
    for( unsigned int t = 0; t < tracks_all.size(); ++t )
    {
      TEST("Correct number track states", tracks_all[t]->history().size(), hs[t]);
      //std::cout << "Track: " << tracks_all[t]->id() << std::endl;
      unsigned int j = 0;
      {
        //std::cout << j << std::endl;
        image_object_sptr image_object;
        bool passed;
        TEST("Has an image object", passed = tracks_all[t]->history()[j]->image_object( image_object ), true);
        vil_image_resource_sptr data;
        unsigned int border;
        TEST("Has image data", passed && (passed = image_object->get_image_chip(data, border)), true);
        TEST("Has None NULL image data", passed && (passed = data!=NULL), true );
        TEST("Image has non-zero size", passed && (passed = data->ni()*data->nj() != 0), true);
      }
      j = tracks_all[t]->history().size() - 1;
      {
        //std::cout << j << std::endl;
        image_object_sptr image_object;
        bool passed;
        TEST("Has an image object", passed = tracks_all[t]->history()[j]->image_object( image_object ), true);
        vil_image_resource_sptr data;
        unsigned int border;
        TEST("Has image data", passed && (passed = image_object->get_image_chip(data, border)), true);
        TEST("Has None NULL image data", passed && (passed = data != NULL), true );
        TEST("Image has non-zero size", passed && (passed = data->ni() * data->nj() != 0), true);
      }
    }
  }
  return testlib_test_summary();
}

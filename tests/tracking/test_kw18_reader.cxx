/*ckwg +5
 * Copyright 2010 by Kitware, Inc. All Rights Reserved. Please refer to
 * KITWARE_LICENSE.TXT for licensing information, or contact General Counsel,
 * Kitware, Inc., 28 Corporate Drive, Clifton Park, NY 12065.
 */


#include <tracking/kw18_reader.h>
#include <testlib/testlib_test.h>

using namespace vidtk;

int test_kw18_reader( int argc, char *argv[] )
{
  testlib_test_start( "test kw18 reader" );
  if( argc < 2)
  {
    TEST( "DATA directory not specified", false, true);
    return EXIT_FAILURE;
  }
  {
    vcl_string xmlPath(argv[1]);
    xmlPath += "/kw18-test.trk";
    vcl_vector< vidtk::track_sptr > tracks;
    vidtk::kw18_reader *reader = new vidtk::kw18_reader(xmlPath.c_str());
    TEST("Read kw18 file", reader->read(tracks), true);

    TEST("There are 301 Tracks", tracks.size(), 301);
    TEST("Track 3 ID is 800006", tracks[3]->id(), 800006);
    TEST("Track 8 has 33 frames", tracks[8]->history().size(), 33);
    TEST("Track 250 Frame 2 Loc X", tracks[250]->history()[2]->loc_[0],197.768);
    TEST("Track 250 Frame 2 Loc Y", tracks[250]->history()[2]->loc_[1],171.715);
    TEST("Track 250 Frame 2 Loc Z", tracks[250]->history()[2]->loc_[2],0.0);

    TEST("Track 250 Frame 2 Vel X", tracks[250]->history()[2]->vel_[0],0.31962200000000002);
    TEST("Track 250 Frame 2 Vel Y", tracks[250]->history()[2]->vel_[1],0.10968700000000001);
    TEST("Track 250 Frame 2 Vel Z", tracks[250]->history()[2]->vel_[2],0.0);

    TEST("Track 250 Frame 2 min_x", tracks[250]->history()[2]->amhi_bbox_.min_x(),507);
    TEST("Track 250 Frame 2 min_y", tracks[250]->history()[2]->amhi_bbox_.min_y(),42);
    TEST("Track 250 Frame 2 max_x", tracks[250]->history()[2]->amhi_bbox_.max_x(),519);
    TEST("Track 250 Frame 2 max_y", tracks[250]->history()[2]->amhi_bbox_.max_y(),73);

    delete reader;
  }

  {
    // clif track file has trailing whitespace
    vcl_string clif_path = vcl_string(argv[1]) + "/clif.trk";
    vcl_vector< vidtk::track_sptr > tracks;
    vidtk::kw18_reader reader( clif_path.c_str() );
    TEST("Read clif kw18 file", reader.read(tracks), true );
    {
      vcl_ostringstream oss;
      oss << "Expected 43 tracks; found " << tracks.size();
      TEST( oss.str().c_str(), tracks.size(), 43 );
    }
  }

  {
    vcl_string kw18_string =
      "800006 31 20 201.258 124.701 -1.71351 3.60446 535 286 523 263 547 286 1.3249 201.258 124.701 0 1222289806.160\n"
      "800006 31 21 201.27 124.727 -1.71351 3.60446 538.5 287 527 264 550 287 1.20871 201.27 124.727 0 1222289806.260\n"
      "800006 31 22 200.886 124.585 -1.71351 3.60446 538 289 526 265 550 289 1.61246 200.886 124.585 0 1222289806.360\n"
      "800006 31 23 200.645 124.911 -1.71351 3.60446 536 290 524 267 548 290 1.84552 200.645 124.911 0 1222289806.460\n"
      "800006 31 24 200.525 125.208 -1.71351 3.60446 536 290 522 267 550 290 2.09764 200.525 125.208 0 1222289806.560\n"
      "800006 31 25 200.374 125.314 -1.71351 3.60446 537 289 521 266 553 289 2.47602 200.374 125.314 0 1222289806.660\n"
      "800006 31 26 200.589 126.849 -1.71351 3.60446 536 284 521 240 551 284 3.31715 200.589 126.849 0 1222289806.760\n"
      "800006 31 27 200.563 126.999 -1.71351 3.60446 537 284 518 240 556 284 3.63154 200.563 126.999 0 1222289806.860\n"
      "800006 31 28 200.254 127.353 -1.71351 3.60446 533.5 282 516 238 551 282 2.96067 200.254 127.353 0 1222289806.960\n"
      "800006 31 29 200.128 127.512 -1.71351 3.60446 534.5 282 515 238 554 282 2.83199 200.128 127.512 0 1222289807.061\n"
      "800006 31 30 200.004 127.725 -1.71351 3.60446 535 282 512 238 558 282 3.6831 200.004 127.725 0 1222289807.161\n"
      "800006 31 31 199.304 128.308 -1.71351 3.60446 525.5 281 511 260 540 281 1.89959 199.304 128.308 0 1222289807.261\n"
      "800006 31 32 199.125 128.666 -1.71351 3.60446 524 280 510 259 538 280 1.73126 199.125 128.666 0 1222289807.361\n"
      "800006 31 33 199.4 130.238 -1.71351 3.60446 523 275 509 260 537 275 1.26564 199.4 130.238 0 1222289807.461\n"
      "800006 31 34 198.965 130.152 -1.71351 3.60446 521 278 507 261 535 278 1.44295 198.965 130.152 0 1222289807.561\n"
      "800006 31 35 198.685 130.113 -1.71351 3.60446 519.5 279 505 261 534 279 1.64485 198.685 130.113 0 1222289807.661\n"
      "800006 31 36 198.514 130.474 -1.71351 3.60446 523 287 493 236 553 287 1.7884 197.94 128.192 0 1222289807.761\n"
      "800006 31 37 198.342 130.833 -1.71614 3.5882 525 287 495 236 555 287 1.61637 197.903 128.126 0 1222289807.861\n"
      "800006 31 38 198.169 131.183 -1.72089 3.53311 528 287 498 236 558 287 1.69424 197.906 128.124 0 1222289807.961\n"
      "800006 31 39 197.995 131.508 -1.72911 3.40829 528 289 498 238 559 289 2.18933 197.767 128.034 0 1222289808.062\n"
      "800006 31 40 197.817 131.781 -1.74655 3.18261 526 291 495 240 557 291 2.52322 197.524 127.988 0 1222289808.162\n"
      "800006 31 41 197.63 131.968 -1.7806 2.82366 526 293 495 242 558 293 2.53905 197.243 127.888 0 1222289808.262\n"
      "800006 31 42 197.426 132.034 -1.83902 2.32081 524 295 492 244 556 295 2.61971 196.939 127.844 0 1222289808.362\n"
      "800006 31 43 197.211 131.953 -1.9026 1.68812 524 297 492 246 557 297 2.73977 196.796 127.832 0 1222289808.462\n"
      "800006 31 44 196.948 131.697 -2.03217 0.923337 519 299 487 248 552 299 2.05159 196.251 127.582 0 1222289808.562\n"
      "800006 31 45 196.64 131.291 -2.20124 0.114743 515 300 483 249 548 300 1.28568 195.852 127.522 0 1222289808.662\n"
      "800006 31 47 196.081 130.651 -2.36128 -0.779403 511 302 478 251 544 302 2.65646 195.521 127.52 0 1222289808.862\n"
      "800006 31 52 195.099 129.279 -2.18327 -1.65519 515 318 482 267 548 318 2.65646 195.476 127.424 0 1222289809.363\n"
      "800006 31 57 194.67 128.072 -1.73988 -1.9084 509 324 476 273 542 324 2.65646 195.552 127.568 0 1222289809.863\n"
      "800006 31 62 194.519 127.232 -1.34164 -1.84441 500 332 467 281 533 332 2.65646 195.427 127.378 0 1222289810.364\n"
      "800006 31 67 194.587 126.801 -0.974407 -1.60064 496 338 463 287 529 338 2.65646 195.574 127.455 0 1222289810.864\n"
      "800010 33 64 189.662 140.594 1.32657 5.40077 361 292 335 228 387 292 10.7275 189.662 140.594 0 1222289810.564\n"
      "800010 33 65 189.541 140.933 1.32657 5.40077 355.5 292 329 227 382 292 10.8061 189.541 140.933 0 1222289810.664\n"
      "800010 33 66 189.608 141.528 1.32657 5.40077 352.5 290 326 227 379 290 10.2749 189.608 141.528 0 1222289810.764\n"
      "800010 33 67 190.3 143.643 1.32657 5.40077 352.5 284 326 227 379 284 9.37619 190.3 143.643 0 1222289810.864\n"
      "800010 33 68 189.982 142.598 1.32657 5.40077 353 289 324 227 382 289 10.6923 189.982 142.598 0 1222289810.964\n"
      "800010 33 69 190.008 142.964 1.32657 5.40077 353 288 323 227 383 288 10.4665 190.008 142.964 0 1222289811.065\n"
      "800010 33 70 190.379 144.487 1.32657 5.40077 351 285 323 241 379 285 5.96342 190.379 144.487 0 1222289811.165\n"
      "800010 33 71 190.229 144.685 1.32657 5.40077 348 287 321 253 375 287 5.27406 190.229 144.685 0 1222289811.265\n"
      "800010 33 72 190.326 144.33 1.32657 5.40077 351 290 320 231 382 290 10.2421 190.326 144.33 0 1222289811.365\n"
      "800010 33 73 190.174 144.735 1.32657 5.40077 349 288 322 228 376 288 9.53832 190.174 144.735 0 1222289811.465\n"
      "800010 33 74 190.366 145.132 1.32657 5.40077 349.5 286 323 227 376 286 9.16036 190.366 145.132 0 1222289811.565\n"
      "800010 33 75 190.703 146.026 1.32657 5.40077 351 285 324 228 378 285 9.07208 190.703 146.026 0 1222289811.665\n"
      "800010 33 76 190.842 146.647 1.32657 5.40077 351.5 285 326 229 377 285 8.72017 190.842 146.647 0 1222289811.765\n"
      "800010 33 77 190.87 146.957 1.32657 5.40077 351.5 283 326 228 377 283 8.5952 190.87 146.957 0 1222289811.865\n"
      "800010 33 78 191.218 147.901 1.32657 5.40077 352.5 282 327 230 378 282 8.15673 191.218 147.901 0 1222289811.965\n"
      "800010 33 79 191.654 148.703 1.32657 5.40077 356 280 329 229 383 280 8.57201 191.654 148.703 0 1222289812.066\n"
      "800010 33 80 191.787 149.244 1.32657 5.40077 353 294 322 229 385 294 8.26729 190.299 145.362 0 1222289812.166\n"
      "800010 33 81 191.919 149.782 1.3172 5.37596 355 295 324 230 387 295 7.83669 190.359 145.65 0 1222289812.266\n"
      "800010 33 82 192.046 150.307 1.28849 5.29857 355 293 324 228 387 293 7.2615 190.451 146.01 0 1222289812.366\n"
      "800010 33 83 192.162 150.8 1.23391 5.13821 355 291 324 226 387 291 7.53493 190.643 146.338 0 1222289812.466\n"
      "800010 33 84 192.258 151.234 1.14127 4.87167 355 292 324 227 387 292 8.00776 190.7 146.755 0 1222289812.566\n"
      "800010 33 85 192.321 151.574 1.00342 4.46598 355 293 324 227 387 293 8.25954 190.754 146.962 0 1222289812.666\n"
      "800010 33 86 192.342 151.781 0.819226 3.91121 356 293 325 227 388 293 7.8899 190.807 147.158 0 1222289812.766\n"
      "800010 33 87 192.316 151.842 0.600133 3.24265 357 294 326 228 389 294 7.53429 190.889 147.487 0 1222289812.866\n"
      "800010 33 89 192.265 151.96 0.330551 2.40328 357 294 326 228 389 294 3.6396 191.089 148.296 0 1222289813.067\n"
      "800010 33 90 192.074 151.461 0.00966209 1.34583 356 300 325 234 388 300 0.748335 190.763 147.14 0 1222289813.167\n"
      "800010 33 92 191.846 150.915 -0.268534 0.360437 358 299 327 233 390 299 2.71443 190.919 147.631 0 1222289813.367\n"
      "800010 33 95 191.593 150.298 -0.436231 -0.346685 357 303 326 237 389 303 4.11599 191.144 148.404 0 1222289813.667\n"
      "800010 33 96 191.463 149.837 -0.516212 -0.741364 357 302 326 236 389 302 3.89847 191.205 148.565 0 1222289813.767\n"
      "800010 33 99 190.862 148.136 -0.88279 -1.95472 353 319 322 253 385 319 2.29938 189.812 144.664 0 1222289814.068\n"
      "800010 33 100 190.568 147.186 -1.04694 -2.55984 352 319 321 253 384 319 2.78925 189.985 145.036 0 1222289814.168\n"
      "800010 33 101 190.35 146.504 -1.13812 -2.90147 352 319 321 253 384 319 2.757 189.978 145.109 0 1222289814.268\n"
      "800010 33 106 190.042 145.594 -0.946951 -2.50461 351 319 320 253 383 319 2.757 190.548 146.645 0 1222289814.768\n";

    vcl_istringstream iss( kw18_string );
    vcl_vector< vidtk::track_sptr > tracks;
    vidtk::kw18_reader reader( iss );
    TEST("Stream: read kw18 stream", reader.read( tracks ), true );
    TEST("There are 2 tracks", tracks.size(), 2 );
    TEST("Track index 0 id is 800006", tracks[0]->id(), 800006 );
    TEST("Track index 1 has 33 frames", tracks[1]->history().size(), 33 );
  }

  return testlib_test_summary();
}

